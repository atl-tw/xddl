plugins {
    id 'java-gradle-plugin'
    id 'org.jetbrains.kotlin.jvm' version '1.3.31'
    id 'com.gradle.plugin-publish' version '0.10.1'
    id 'groovy'
}

dependencies {
    api project(':xddl-core')
    api project(':xddl-plugin-markdown')
    api project(':xddl-plugin-json-schema')
    api project(':xddl-plugin-graphvis')
    api project(':xddl-plugin-elasticsearch')
    api project(':xddl-plugin-java')
    api project(':xddl-plugin-hive')
    api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    testImplementation('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude group: 'org.codehaus.groovy'
    }

}


sourceSets {
    functionalTest {
        groovy.srcDir file('src/functional/groovy')
        java.srcDir file('src/functional/java')
        resources.srcDir file('src/functional/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test //, integrationTest
    testLogging {
        showStandardStreams = true
    }
    jacoco {
        enabled = true
        append = true
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}

check.dependsOn functionalTest


if(project.hasProperty("kebernet_bintray")) {
    bintray {
        user = getProperty("kebernet_bintray")
        key = getProperty("kebernet_bintray_api")
        pkg {
            repo = 'maven'
            name = 'xddl'
            publish = true
            licenses = ['Apache-2.0']
            publications = ['xddl']
        }
    }
}

publishing {
    publications {
        xddl(MavenPublication) {
            from components.java
            groupId "${project.group}"
            artifactId "${project.group}.gradle.plugin"
            version rootProject.version
        }
    }
}


pluginBundle {
    website = "https://github.com/atl-tw/xddl"
    vcsUrl = "https://github.com/atl-tw/xddl.git"
    description = "Multi-environment DDLs"
    tags = ['json', 'java', 'hive', 'markdown', "elasticsearch"]

    plugins {
        xddl {
            id = 'net.kebernet.xddl'
            displayName = "xDDL"
            description = "Extensible Data Definition Language"
        }
    }
}

gradlePlugin {
    plugins {
        xddl {
            id = 'net.kebernet.xddl'
            implementationClass = 'net.kebernet.xddl.gradle.XDDLPlugin'
        }
    }
}
