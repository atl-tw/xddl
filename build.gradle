buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:5.2.1'
    }
}
plugins {
    id 'com.gradle.build-scan' version '2.1'
    id 'com.github.hierynomus.license' version "0.15.0"
    id 'com.diffplug.gradle.spotless' version '3.23.1'
    id 'com.jfrog.bintray' version "1.8.4"
    id 'org.jetbrains.dokka' version '0.9.17'
}

group 'net.kebernet'
version '0.1.4'

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

if(project.hasProperty("kebernet_bintray")) {
    bintray {
        user = getProperty("kebernet_bintray")
        key = getProperty("kebernet_bintray_api")
        pkg {
            repo = 'maven'
            name = 'xddl'
            publish = true
            licenses = ['Apache-2.0']

        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'com.diffplug.gradle.spotless'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.dokka'

    if(project.name != "integration-test" ) {
        apply plugin: 'com.jfrog.bintray'
    }

    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }


    group 'net.kebernet.xddl'
    version rootProject.version

    sourceCompatibility = 1.8

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        api 'com.fasterxml.jackson.core:jackson-databind:2.9.10'
        implementation 'org.projectlombok:lombok:1.18.8'
        implementation 'com.google.guava:guava:28.0-jre'
        annotationProcessor 'org.projectlombok:lombok:1.18.8'
        testImplementation 'com.google.truth:truth:1.0'
        testImplementation 'junit:junit:4.12'
        testImplementation 'org.mockito:mockito-core:2.28.2'
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
    }

    task packageJavadoc(type: Jar, dependsOn: ['javadoc', 'dokka']  ) {
        from javadoc.destinationDir
        from file("${project.buildDir.absolutePath}/dokka")
        classifier = 'javadoc'
    }


    publishing {
        publications {
            java(MavenPublication) {
                from components.java
                groupId project.group
                artifactId project.name
                version rootProject.version
                artifact sourceJar {
                    classifier "sources"
                }
                artifact packageJavadoc
            }
        }
    }

    if(project.hasProperty("kebernet_bintray") && project.name != "integration-test") {

        bintray {
            user = getProperty("kebernet_bintray")
            key = getProperty("kebernet_bintray_api")
            pkg {
                repo = 'maven'
                name = 'xddl'
                publish = true
                licenses = ['Apache-2.0']
                publications = ['java']

            }
        }
    }

    spotless {
        groovy {
            excludeJava()
            paddedCell()
        }
        java {
            googleJavaFormat()
        }
        kotlin {
            ktlint().userData(['indent_size': '4', 'continuation_indent_size': '4'])
        }
    }

    dependencyCheck {
        suppressionFile = rootProject.file("src/etc/suppression.xml")
        format = 'ALL'
        analyzers {
            retirejs {
                enabled = false
            }
        }
    }


    license {
        header rootProject.file('src/etc/HEADER')
        strictCheck true
        mapping("java", "SLASHSTAR_STYLE")
        exclude "**/*.json"
        exclude "**/*.mustache"

    }



    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }


    build.dependsOn sourceJar
    build.dependsOn packageJavadoc
    check.dependsOn dependencyCheckAnalyze
    check.dependsOn licenseFormat
    check.finalizedBy jacocoTestReport
}
